model Hotel

class BeliefAgent
end

class Room 

attributes
  number:Integer

/**** EXTRA ATTRIBUTES FOR BELIEF OPERATIONS AND ATTRIBUTES ****/

-- CREDENCE ASSOCIATED TO THE OBJECTS OF THE CLASS (It was COnfidence in our MODELS'18 paper)  
room_Beliefs: Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
          -- initial values can be set too. Suppose the confidence is 0.95. Then we could change that init: by 
          -- init: Set{Tuple{beliefAgent:null,degreeOfBelief:0.95}}

		  
-- EXTRA ATTRIBUTES FOR CLASS ATTRIBUTES 
-- None in this class, attribute number is not subject to belief uncertainty

-- EXTRA ATTRIBUTES FOR ASSOCIATION ENDS 
  
smokeDetector_Beliefs: Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
coSensor_Beliefs: Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
tempSensor_Beliefs: Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
-- alarmCenter is not subject to belief uncertainty

-- EXTRA ATTRIBUTES FOR QUERY OPERATIONS
isHot_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
isCold_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}

-- EXTRA ATTRIBUTES FOR CONSTRAINTS
correctRoomNumberType_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}

operations

-- EXTRA OPERATIONS FOR CREDENCE
-- class confidence and attributes
  room_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.room_Beliefs:=self.room_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end

-- extra operations for invariants
  correctRoomNumberType_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.correctRoomNumberType_Beliefs:=self.correctRoomNumberType_Beliefs->
	    reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end

-- extra operations for association ends
  smokeDetector_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.smokeDetector_Beliefs:=self.smokeDetector_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  coSensor_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.coSensor_Beliefs:=self.coSensor_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  tempSensor_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.tempSensor_Beliefs:=self.tempSensor_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end

-- EXTRA OPERATIONS FOR QUERY OPS

  isHot_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.isHot_Beliefs:=self.isHot_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  isHot_BeliefsRm(ba:BeliefAgent)
  begin -- remove the degrees of beliefs by one agent
     self.isHot_Beliefs:=self.isHot_Beliefs->reject(t|t.beliefAgent=ba)
  end
  isCold_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.isCold_Beliefs:=self.isCold_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
-- THE OPERATIONS (Finally :-) ------------

--- ASSOCIATION ENDS ------------

  smokeDetector_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.smokeDetector_Beliefs->select(t|t.beliefAgent = ba) in
    if baBoD->isEmpty then 
		if self.smokeDetector_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.smokeDetector_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif

  coSensor_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.coSensor_Beliefs->select(t|t.beliefAgent = ba) in
    if baBoD->isEmpty then 
		if self.coSensor_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.coSensor_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif

  tempSensor_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.tempSensor_Beliefs->select(t|t.beliefAgent = ba) in
    if baBoD->isEmpty then 
		if self.tempSensor_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.tempSensor_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif
 
-- OPERATION isHot(): 

  isHot() : UBoolean  
    = self.tempSensor.temperature > 25

  isHot_credence(a:BeliefAgent): Real =
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.isHot_Beliefs->select(t|t.beliefAgent = a) in
    if baBoD->isEmpty then 
		if self.isHot_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.isHot_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif
  
--- OPERATION isCold():------------

  isCold() : UBoolean  
    = self.tempSensor.temperature < 18

  isCold_credence(a:BeliefAgent) : Real =
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.isCold_Beliefs->select(t|t.beliefAgent = a) in
    if baBoD->isEmpty then 
		if self.isCold_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.isCold_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif


  
--- CONSTRAINT correctRoomNumberType:------------

  correctRoomNumberType() : Boolean  
    = self.number.oclIsTypeOf(Integer)

  correctRoomNumberType_credence(a:BeliefAgent) : Real =
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.correctRoomNumberType_Beliefs->select(t|t.beliefAgent = a) in
    if baBoD->isEmpty then 
		if self.correctRoomNumberType_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.correctRoomNumberType_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif

   
end  -- of class Room


class COSensor
attributes
  coPPM:UInteger 

/* ADDED */
-- EXTRA ATTRIBUTES FOR QUERY OPERATIONS
  coPPM_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{Tuple{beliefAgent:null,degreeOfBelief:0.9}}

operations
  coPPM_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.coPPM_Beliefs:=self.coPPM_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  coPPM_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.coPPM_Beliefs->select(t|t.beliefAgent = ba) in
    if baBoD->isEmpty then 
		if self.coPPM_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.coPPM_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
    else baBoD->collect(degreeOfBelief)->any(true) 
    endif


/* End of ADDED */

end

class TempSensor
attributes
  temperature:UReal 
end

class SmokeDetector
attributes
  smoke:UBoolean -- Tuple{degreeOfBelief : 0.9, beliefAgent : Set{} }

/* ADDED */
-- EXTRA ATTRIBUTES FOR QUERY OPERATIONS
  smoke_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{Tuple{beliefAgent:null,degreeOfBelief:0.9}}

operations
  smoke_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.smoke_Beliefs:=self.smoke_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  smoke_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.smoke_Beliefs->select(t|t.beliefAgent = ba) in
    if baBoD->isEmpty then 
		if self.smoke_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.smoke_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif

/* End of ADDED */
  
end

composition CO between
  Room [1] role room
  COSensor [1] role coSensor
end

composition Temp between
  Room [1] role room
  TempSensor [1] role tempSensor
end

composition Smoke between
  Room [1] role room
  SmokeDetector [1] role smokeDetector
end


class AlarmCenter
attributes
  highTemp : UBoolean 
    derive = self.room.tempSensor.temperature>30 -- Tuple{degreeOfBelief : 0.95, beliefAgent : null }
  highCOLevel : UBoolean 
    derive = self.room.coSensor.coPPM>20 -- Tuple{degreeOfBelief : 0.95, beliefAgent : null}
  smoke : UBoolean 
	derive = self.room.smokeDetector.smoke 
  fireAlert : UBoolean 
	derive = highTemp and highCOLevel and smoke -- Tuple{degreeOfBelief : 0.95, beliefAgent : null }

/* ADDED */
-- EXTRA ATTRIBUTES FOR DERIVED ATTRIBUTES
  highTemp_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
  highCOLevel_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
  smoke_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
  fireAlert_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}
  fireAlertDeriveExpr_Beliefs:Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) init: Set{}

operations
  highTemp_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.highTemp_Beliefs:=self.highTemp_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  highTemp_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.highTemp_Beliefs->select(t|t.beliefAgent = ba) in
    (if baBoD->isEmpty then 
		if self.highTemp_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.highTemp_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif) 

  highCOLevel_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.highCOLevel_Beliefs:=self.highCOLevel_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  highCOLevel_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.highCOLevel_Beliefs->select(t|t.beliefAgent = ba) in
    (if baBoD->isEmpty then 
		if self.highCOLevel_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.highCOLevel_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif) 

  smoke_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.smoke_Beliefs:=self.smoke_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  smoke_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.smoke_Beliefs->select(t|t.beliefAgent = ba) in
    (if baBoD->isEmpty then 
		if self.smoke_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.smoke_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif) 
	
/*** FIRE ALERT - example of how credence is propagated ***/

  -- We start with the belief of degree of the attribute itself (vailidity)
  

  fireAlert_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.fireAlert_Beliefs:=self.fireAlert_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
-- the credence of the attribute, however, incorporates all accumulated degrees of belief 
-- coming from the propagation of the constituent components of the expressions that define it.
  
  fireAlert_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.fireAlert_Beliefs->select(t|t.beliefAgent = ba) in
    (if baBoD->isEmpty then 
		if self.fireAlert_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.fireAlert_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif)
	*  -- we aggregate by multiplication, assuming independence
    fireAlertDeriveExpr_credence(ba)

	

-- And this is the part for the degree of belief assigned to the "derive:" expression


  fireAlertDeriveExpr_BeliefsAdd(ba:BeliefAgent,dob:Real)
  begin -- remove previous beliefs by the same agent, if any, and then add the new one
     self.fireAlertDeriveExpr_Beliefs:=self.fireAlertDeriveExpr_Beliefs->reject(t|t.beliefAgent=ba)->including(Tuple{beliefAgent:ba,degreeOfBelief:dob})
  end
  
  fireAlertDeriveExpr_credence(ba:BeliefAgent): Real =     
    let baBoD : Set(Tuple(beliefAgent:BeliefAgent,degreeOfBelief:Real)) = self.fireAlertDeriveExpr_Beliefs->select(t|t.beliefAgent = ba) in
    (if baBoD->isEmpty then
		if self.fireAlertDeriveExpr_Beliefs->select(t|t.beliefAgent = null)->notEmpty then 
			self.fireAlertDeriveExpr_Beliefs->select(t|t.beliefAgent = null)->collect(degreeOfBelief)->any(true)
		else 1.0
		endif
	else baBoD->collect(degreeOfBelief)->any(true) 
    endif)
	-- again, we aggregate by multiplication
	* highTemp_credence(ba) 
	* highCOLevel_credence(ba)
	* smoke_credence(ba)	
	
/*** END of FIRE ALERT specification ***/
	
	

/* End of ADDED */

end

composition RoomAlarmed between
	Room [1] role room 
	AlarmCenter [1] role alarmCenter
end


constraints 

context Room inv UniqueNumbers:
	Room.allInstances->forAll(r1,r2|r1<>r2 implies r1.number<>r2.number) 

context TempSensor inv TempPrecision:
  self.temperature.uncertainty() <= 0.02 -- Tuple{degreeOfBelief : 0.98, beliefAgent : Set{} }

context SmokeDetector inv correctSmokeType: 
  self.smoke.oclIsTypeOf(UBoolean) -- Tuple{degreeOfBelief : 0.95, beliefAgent : Set{} }

context Room inv correctRoomNumberType: 
  self.number.oclIsTypeOf(Integer) -- Tuple{degreeOfBelief : 0.95, beliefAgent : Set{'Bob} }

context AlarmCenter inv correctRoomCardinality: 
  self.room->size = 1 -- Tuple{degreeOfBelief : 0.95, beliefAgent : Set{} }


